/*
 * Logic simlator
 * Author: Martin Krcma
 */
package window;

import com.fazecast.jSerialComm.SerialPort;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logicSimulator.LogicSimulatorCore;
import logicSimulator.Project;
import logicSimulator.SerialPortDriver;
import logicSimulator.common.SerialIO;
import logicSimulator.objects.input.SerialInputTrigger;
import logicSimulator.projectFile.WorkSpace;

/**
 *
 * @author Martin
 */
public class SerialConfiguration extends javax.swing.JFrame {

    //system core
    private LogicSimulatorCore core;

    //serial port drivere
    private SerialPortDriver sDriver;

    //project
    private Project project;

    //parent frame
    private final JFrame parent;

    //port combobox model
    private final DefaultComboBoxModel<SerialPort> availablePorts;

    //table model
    private final DefaultTableModel tableModel;

    /**
     * Creates new form SerialConfiguration
     *
     * @param parent Parent frame
     */
    public SerialConfiguration(JFrame parent) {
        this.parent = parent;
        this.availablePorts = new DefaultComboBoxModel<>();
        this.tableModel = new DefaultTableModel(new Object[]{"ID", "Type", "Set value", "Reset value"}, 0);

        initComponents();
    }

    /**
     * Init serial port configurator
     *
     * @param core LogicSimulatorCore
     * @throws java.lang.Exception
     */
    public void init(LogicSimulatorCore core) throws Exception {
        this.core = core;

        //load SerialPortDriver, Project
        core.getLSComponents().forEach((obj) -> {
            if (obj instanceof SerialPortDriver) {
                this.sDriver = (SerialPortDriver) obj;
            } else if (obj instanceof Project) {
                this.project = (Project) obj;
            }
        });
        if (this.sDriver == null) {
            throw new Exception("SerialConfiguration: SerialPorta driver not exist");
        }
        if (this.project == null) {
            throw new Exception("SerialConfiguration: Project not found");
        }
    }

    public void showComponent() {
        this.setLocationRelativeTo(this.parent);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxPort = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonConnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonAddInTrig = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldBaud = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serial Port Configurator");
        setType(java.awt.Window.Type.UTILITY);

        jComboBoxPort.setModel(this.availablePorts);
        jComboBoxPort.setRenderer(new ComboBoxPortRenderer());
        jComboBoxPort.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxPortPopupMenuWillBecomeVisible(evt);
            }
        });

        jLabel1.setText("Port:");

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTable1.setModel(this.tableModel);
        jTable1.setToolTipText("");
        jTable1.setDefaultRenderer(Object.class, new TableRenderer());
        jScrollPane1.setViewportView(jTable1);

        jButtonAddInTrig.setText("Add Seria IO component");
        jButtonAddInTrig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddInTrigActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jLabel2.setText("Baud rate:");

        jTextFieldBaud.setText("9600");
        jTextFieldBaud.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBaudKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAddInTrig, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldBaud, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                            .addComponent(jComboBoxPort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldBaud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddInTrig)
                    .addComponent(jButtonRemove))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        //remove serial io component
        Object selected = this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 0);
        if (selected != null) {
            //remove selecte serial io
            SerialIO sIO = (SerialIO) selected;
            this.sDriver.getSerialIOs().remove(sIO);
            //refresh table
            this.refreshTable();
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jComboBoxPortPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxPortPopupMenuWillBecomeVisible
        //current selected port
        SerialPort selected = (SerialPort) this.jComboBoxPort.getSelectedItem();

        //reload available ports
        this.availablePorts.removeAllElements();
        SerialPort[] ports = this.sDriver.getAvailableSerialPorts();
        for (SerialPort port : ports) {
            this.availablePorts.addElement(port);
            //selecte last selected port
            if (selected != null) {
                if (port.getDescriptivePortName().endsWith(selected.getDescriptivePortName())) {
                    this.jComboBoxPort.setSelectedItem(port);
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPortPopupMenuWillBecomeVisible

    private void jTextFieldBaudKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBaudKeyReleased
        try {
            int baud = Integer.parseInt(this.jTextFieldBaud.getText());
            this.sDriver.setBaudRate(baud);
        } catch (NumberFormatException ex) {
        }
    }//GEN-LAST:event_jTextFieldBaudKeyReleased

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        if (this.jComboBoxPort.getSelectedItem() != null) {
            //open port
            this.sDriver.openSerialPort((SerialPort) this.jComboBoxPort.getSelectedItem());

            //set baud rate
            try {
                int baud = Integer.parseInt(this.jTextFieldBaud.getText());
                this.sDriver.setBaudRate(baud);
            } catch (NumberFormatException ex) {
            }

            //run
            this.sDriver.run();
            this.sDriver.setParity(SerialPort.NO_PARITY);
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jButtonAddInTrigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddInTrigActionPerformed
        List<SerialIO> sIOs = new ArrayList<>();

        //find serial input trigger
        this.project.getProjectFiles().stream()
                .filter((pf) -> (pf instanceof WorkSpace))
                .map((pf) -> (WorkSpace) pf)
                .forEachOrdered((w) -> {

                    w.getObjects().stream()
                            .filter((obj) -> (obj instanceof SerialIO))
                            .map((obj) -> (SerialIO) obj)
                            .forEachOrdered((sIO) -> {
                                sIOs.add(sIO);
                            });

                });

        //show JOptionPane with combobox
        JComboBox combo = new JComboBox(sIOs.toArray());
        combo.setRenderer(new ComboBoxInTrigRenderer());
        if (JOptionPane.showConfirmDialog(this, new Object[]{combo}, "Add SerialIO component",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {
            //add selected serial io to serial port driver
            SerialIO sIO = (SerialIO) combo.getSelectedItem();
            this.sDriver.getSerialIOs().add(sIO);
            //refresh table
            refreshTable();
        }

    }//GEN-LAST:event_jButtonAddInTrigActionPerformed

    private void refreshTable() {
        this.tableModel.getDataVector().clear();

        this.sDriver.getSerialIOs().forEach((sIO) -> {
            this.tableModel.addRow(new Object[]{sIO, sIO, sIO, sIO});
        });

        this.jTable1.revalidate();
        this.jTable1.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddInTrig;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JComboBox<SerialPort> jComboBoxPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldBaud;
    // End of variables declaration//GEN-END:variables

    private class ComboBoxPortRenderer extends BasicComboBoxRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            super.getListCellRendererComponent(list, value, index, isSelected,
                    cellHasFocus);

            if (value instanceof SerialPort) {
                SerialPort port = (SerialPort) value;
                setText(port.getDescriptivePortName());
            }

            return this;
        }

    }

    private class ComboBoxInTrigRenderer extends BasicComboBoxRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            super.getListCellRendererComponent(list, value, index, isSelected,
                    cellHasFocus);

            if (value instanceof SerialIO) {
                SerialIO sIO = (SerialIO) value;
                setText(sIO.getID());
            }

            return this;
        }

    }

    private class TableRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

            if (value instanceof SerialIO) {
                SerialIO ser = (SerialIO) value;
                switch (col) {
                    case 0:
                        super.setText(ser.getID());
                        break;
                    case 1:
                        super.setText(ser.getType());
                        break;
                    case 2:
                        super.setText(Integer.toBinaryString(ser.getSetValue()));
                        break;
                    case 3:
                        super.setText(Integer.toBinaryString(ser.getResetValue()));
                        break;
                }
            }

            return this;
        }

    }

}
