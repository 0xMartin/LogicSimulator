/*
 * Logic simlator
 * Author: Martin Krcma
 */
package window;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logicSimulator.Project;
import logicSimulator.Tools;
import logicSimulator.common.Memory;
import logicSimulator.projectFile.HEXEditor;

/**
 *
 * @author Martin
 */
public class RAMMemoryEditor extends javax.swing.JFrame {

    private boolean SAVE_CHANGES = true;

    private final Memory memory;

    private final Project project;

    /**
     * Creates new form RAMMemoryEditor
     *
     * @param memory Memory
     * @param project Project
     */
    public RAMMemoryEditor(Memory memory, Project project) {
        initComponents();

        this.project = project;

        //init data from memory
        this.memory = memory;
        initData();

        HexTable centerRenderer = new HexTable();
        this.jTable1.setDefaultRenderer(Object.class, centerRenderer);
        this.jTable1.setShowGrid(false);
        this.jTable1.setForeground(Color.blue);
        this.jTable1.getTableHeader().setReorderingAllowed(false);
        this.jTable1.getTableHeader().setResizingAllowed(false);
        this.jTable1.getTableHeader().getColumnModel().getColumn(0).setMinWidth(50);
    }

    private class HexTable extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel(value.toString());
            if (label.getText().length() == 1) {
                label.setText("0" + label.getText());
            }

            if (table.isCellEditable(row, column)) {
                label.setFont(new Font("Consolas", Font.PLAIN, 13));
                if (label.getText().equals("00")) {
                    label.setForeground(Color.GRAY);
                } else {
                    label.setForeground(Color.black);
                }
            } else {
                label.setFont(new Font("Consolas", Font.BOLD, 13));
                label.setForeground(Color.BLUE);
            }

            if (isSelected) {
                label.setForeground(Color.RED);
            }

            label.setHorizontalAlignment(JLabel.CENTER);
            return label;
        }

    }

    private void initData() {
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
        model.getDataVector().clear();
        //header
        model.addColumn("Offset");
        for (int i = 0; i < 16; i++) {
            model.addColumn(Tools.toHexDigit(i));
        }

        this.SAVE_CHANGES = false;

        //data
        boolean[] data = this.memory.getData();
        int bitWidth = this.memory.getBitWidth();

        //read all cells in memory data and conver them from bin to hex
        for (int adress = 0; adress < data.length / bitWidth; adress += 16) {
            String[] row = new String[17];
            row[0] = Tools.convertToNumber(adress, 16);

            for (int off = 0; off < 16; off++) {
                boolean[] cell = new boolean[bitWidth];
                for (int i = 0; i < bitWidth; i++) {
                    if (i + (adress + off) * bitWidth < data.length) {
                        cell[i] = data[i + (adress + off) * bitWidth];
                    } else {
                        break;
                    }
                }
                row[1 + off] = Tools.convertToNumber(Tools.binToDec(cell), 16);
            }

            model.addRow(row);
        }

        this.SAVE_CHANGES = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTable(){
            public boolean isCellEditable(int row, int column) {
                return column != 0;
            }
        };
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RAM memory data editor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("File");

        jMenuItem1.setText("Save");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open");
        jMenu1.add(jMenuItem2);

        jMenuItem5.setText("Import");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setText("Clear all");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Replace");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        savaChanges();
    }//GEN-LAST:event_jTable1PropertyChange

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed

    }//GEN-LAST:event_jTable1KeyPressed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        //clear all
        boolean[] data = this.memory.getData();
        for (int i = 0; i < data.length; i++) {
            data[i] = false;
        }

        //reload data
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
        //read all cells in memory data and conver them from bin to hex
        for (int row = 0; row < this.jTable1.getRowCount(); row++) {
            for (int col = 0; col < this.jTable1.getColumnCount(); col++) {
                model.setValueAt("0", row, col);
            }
        }
        this.repaint();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JTextField oldF = new JTextField("");
        JTextField newF = new JTextField("");
        int stat = JOptionPane.showConfirmDialog(
                this,
                new Object[]{new JLabel("Old: "), oldF, new JLabel("New: "), newF},
                "Replace",
                JOptionPane.OK_CANCEL_OPTION
        );
        if (stat == JOptionPane.OK_OPTION) {
            int old = Tools.binToDec(Tools.hexToBinArray(oldF.getText()));
            DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
            for (int row = 0; row < this.jTable1.getRowCount(); row++) {
                for (int col = 0; col < this.jTable1.getColumnCount(); col++) {
                    int t = Tools.binToDec(Tools.hexToBinArray(model.getValueAt(row, col).toString()));
                    if (old == t) {
                        model.setValueAt(newF.getText(), row, col);
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savaChanges();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        List<HEXEditor> hex = new ArrayList<>();

        this.project.getProjectFiles().stream().forEach((pf) -> {
            if (pf instanceof HEXEditor) {
                hex.add((HEXEditor) pf);
            }
        });

        String[] names = new String[hex.size()];
        int index = 0;
        for (HEXEditor h : hex) {
            names[index++] = h.getName();
        }

        //hex editor
        String input = (String) JOptionPane.showInputDialog(
                this,
                "Choose hex file from project",
                "Import data",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                names,
                names[0]
        );

        //find selected editor and then import data from it
        try {
            DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
            for (HEXEditor editor : hex) {
                if (editor.getName().equals(input)) {
                    //get binary data from hex editor (program for memory)
                    List<String> data = editor.getHexData();
                    this.SAVE_CHANGES = false;

                    //all data put to the table
                    int adress = 0;
                    int row = 0, col = 0;
                    while (true) {
                        if (col == 16) {
                            col = 0;
                            row++;
                        }
                        if (row == this.jTable1.getRowCount() || adress == data.size()) {
                            break;
                        }
                        model.setValueAt(data.get(adress++), row, 1 + col);
                        col++;
                    }

                    this.SAVE_CHANGES = true;
                    //sava all to memory data array
                    savaChanges();
                    break;
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    "Can import data",
                    "Error",
                    JOptionPane.ERROR_MESSAGE,
                    null
            );
            Logger.getLogger(RAMMemoryEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void savaChanges() {
        if (this.memory == null || !SAVE_CHANGES) {
            return;
        }

        //find changed cells
        boolean[] data = this.memory.getData();
        int bitWidth = this.memory.getBitWidth();
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());

        if (model != null) {

            //for each cell
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 1; col < model.getColumnCount(); col++) {
                    int adress = (row * 16 + (col - 1)) * bitWidth;

                    if (adress + bitWidth >= data.length) {
                        continue;
                    }

                    //value of cell in memory
                    boolean[] value = new boolean[bitWidth];
                    for (int i = 0; i < bitWidth; i++) {
                        if (adress + i < data.length) {
                            value[i] = data[adress + i];
                        }
                    }

                    //value in table
                    String tableCell = model.getValueAt(row, col).toString();
                    //if is empty then isert 0
                    if (tableCell.length() == 0) {
                        tableCell = "0";
                        model.setValueAt("0", row, col);
                    }

                    //if are diferent then send new value of cell to data in memory
                    String valueStr = Tools.convertToNumber(Tools.binToDec(value), 16);
                    if (!valueStr.equals(tableCell)) {
                        boolean[] newVal = Tools.hexToBinArray(tableCell);
                        for (int i = 0; i < bitWidth; i++) {
                            if (adress + i < data.length) {
                                if (i < newVal.length) {
                                    data[adress + i] = newVal[i];
                                } else {
                                    //if new bin value not begin then replay bits by false
                                    data[adress + i] = false;
                                }
                            }
                        }
                    }

                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
