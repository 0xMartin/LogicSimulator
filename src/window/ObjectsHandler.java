/*
 * Logic simlator
 * Author: Martin Krcma
 */
package window;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import logicSimulator.Project;
import logicSimulator.ProjectFile;
import logicSimulator.Tools;
import logicSimulator.WorkSpaceObject;
import logicSimulator.common.Propertie;
import logicSimulator.projectFile.WorkSpace;
import logicSimulator.ui.SystemResources;

/**
 *
 * @author Martin
 */
public class ObjectsHandler extends javax.swing.JFrame {

    private final DefaultListModel<Object[]> listModel;

    /**
     * Creates new form ObjectsAnalytics
     *
     * @param parent JFrame
     */
    public ObjectsHandler(JFrame parent) {
        this.listModel = new DefaultListModel<>();
        initComponents();
        super.setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>(){

            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                Tools.setHighQuality(g2);
                super.paintComponent(g2);
            }

        };
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Object handler");
        setIconImage(SystemResources.ICON);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("Reload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove all selected");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Replace by");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jList1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jList1.setModel(this.listModel);
        jList1.setCellRenderer(new ListRenderer());
        jScrollPane1.setViewportView(jList1);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Current workspace");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Project");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        List<Object[]> selectedList = this.jList1.getSelectedValuesList();
        if (selectedList != null) {
            selectedList.stream().forEach((selected) -> {
                String objName = selected[0].toString();

                if (this.project != null) {
                    if (this.jRadioButton1.isSelected()) {
                        ProjectFile pf = this.project.getSelectedFile();
                        if (pf instanceof WorkSpace) {
                            if (!((WorkSpace) pf).isLibFile) {
                                List<WorkSpaceObject> objs = ((WorkSpace) pf).getObjects();
                                for (int i = 0; i < objs.size(); ++i) {
                                    if (Tools.getComponentName(objs.get(i)).equals(objName)) {
                                        objs.remove(i);
                                        --i;
                                    }
                                }
                            }
                            pf.getHandler().repaintPF();
                        }
                    } else {
                        this.project.getProjectFiles().stream().forEach((pf) -> {
                            if (pf instanceof WorkSpace) {
                                if (!((WorkSpace) pf).isLibFile) {
                                    List<WorkSpaceObject> objs = ((WorkSpace) pf).getObjects();
                                    for (int i = 0; i < objs.size(); ++i) {
                                        if (Tools.getComponentName(objs.get(i)).equals(objName)) {
                                            objs.remove(i);
                                            --i;
                                        }
                                    }
                                }
                                pf.getHandler().repaintPF();
                            }
                        });
                    }
                }
            });

        }

        reload();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        reload();
    }//GEN-LAST:event_formWindowOpened

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        JComboBox<String> componentList = new JComboBox<>(new String[]{
            "Buffer",
            "Controled buffer",
            "Not",
            "Controled not",
            "Or",
            "Nor",
            "And",
            "Nand",
            "Xor",
            "Nxor",
            "MUX",
            "DMUX",
            "Bulp",
            "Button",
            "Clock",
            "Bit get",
            "Bit set",
            "Bridge"
        });

        JOptionPane.showMessageDialog(this, new Object[]{"Selecte new component: ", componentList},
                "Replace by", JOptionPane.QUESTION_MESSAGE);

        WorkSpaceObject comp = ComponentChooser.selectComponent(componentList.getSelectedItem().toString());

        List<Object[]> selectedList = this.jList1.getSelectedValuesList();

        final List<Object[]> newComps = new ArrayList<>();

        if (selectedList != null) {
            selectedList.stream().forEach((selected) -> {
                String objName = selected[0].toString();

                if (this.project != null) {
                    if (this.jRadioButton1.isSelected()) {
                        ProjectFile pf = this.project.getSelectedFile();
                        if (pf instanceof WorkSpace) {
                            if (!((WorkSpace) pf).isLibFile) {
                                List<WorkSpaceObject> objs = ((WorkSpace) pf).getObjects();
                                for (int i = 0; i < objs.size(); ++i) {
                                    if (Tools.getComponentName(objs.get(i)).equals(objName)) {

                                        WorkSpaceObject compCopy = comp.cloneObject();

                                        int inputs = 2;
                                        for (Propertie propt : objs.get(i).getProperties()) {
                                            if (propt.getName().equals("Inputs")) {
                                                inputs = propt.getValueInt();
                                                break;
                                            }
                                        }

                                        compCopy.changePropertie(new Propertie("Inputs", inputs));
                                        compCopy.getModel().rotate(objs.get(i).getModel().getAngle());
                                        compCopy.getPosition().x = objs.get(i).getPosition().x;
                                        compCopy.getPosition().y = objs.get(i).getPosition().y;
                                        newComps.add(new Object[]{pf, compCopy});

                                        objs.remove(i);
                                        --i;
                                    }
                                }
                            }
                            pf.getHandler().repaintPF();
                        }
                    } else {
                        this.project.getProjectFiles().stream().forEach((pf) -> {
                            if (pf instanceof WorkSpace) {
                                if (!((WorkSpace) pf).isLibFile) {
                                    List<WorkSpaceObject> objs = ((WorkSpace) pf).getObjects();
                                    for (int i = 0; i < objs.size(); ++i) {
                                        if (Tools.getComponentName(objs.get(i)).equals(objName)) {

                                            WorkSpaceObject compCopy = comp.cloneObject();

                                            int inputs = 2;
                                            for (Propertie propt : objs.get(i).getProperties()) {
                                                if (propt.getName().equals("Inputs")) {
                                                    inputs = propt.getValueInt();
                                                    break;
                                                }
                                            }

                                            compCopy.changePropertie(new Propertie("Inputs", inputs));
                                            compCopy.getModel().rotate(objs.get(i).getModel().getAngle());
                                            compCopy.getPosition().x = objs.get(i).getPosition().x;
                                            compCopy.getPosition().y = objs.get(i).getPosition().y;
                                            newComps.add(new Object[]{pf, compCopy});

                                            objs.remove(i);
                                            --i;
                                        }
                                    }
                                }
                                pf.getHandler().repaintPF();
                            }
                        });
                    }
                }
            });

            newComps.stream().forEach((c) -> {
                ((WorkSpace) c[0]).getObjects().add((WorkSpaceObject) c[1]);
                ((WorkSpace) c[0]).getHandler().repaintPF();
            });

        }

        reload();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        reload();
    }//GEN-LAST:event_jButton1ActionPerformed

    private Project project;

    public void setProject(Project project) {
        this.project = project;
    }

    private void reload() {
        if (this.project == null) {
            return;
        }

        this.listModel.clear();

        final HashMap<String, Integer> objMap = new HashMap<>();
        final List<String> objs = new ArrayList<>();

        if (this.jRadioButton1.isSelected()) {
            if (this.project.getSelectedFile() instanceof WorkSpace) {
                ((WorkSpace) this.project.getSelectedFile()).getObjects().stream().forEach((obj) -> {
                    String objName = Tools.getComponentName(obj);
                    Integer count = objMap.get(objName);
                    if (count == null) {
                        objMap.put(objName, 1);
                        objs.add(objName);
                    } else {
                        objMap.put(objName, 1 + count);
                    }
                });
            }
        } else {
            this.project.getProjectFiles().stream().forEach((pf) -> {
                if (pf instanceof WorkSpace) {
                    if (!((WorkSpace) pf).isLibFile) {
                        ((WorkSpace) pf).getObjects().stream().forEach((obj) -> {
                            String objName = Tools.getComponentName(obj);
                            Integer count = objMap.get(objName);
                            if (count == null) {
                                objMap.put(objName, 1);
                                objs.add(objName);
                            } else {
                                objMap.put(objName, 1 + count);
                            }
                        });
                    }
                }
            });
        }

        objs.stream().forEach((obj) -> {
            this.listModel.add(this.listModel.getSize(), new Object[]{obj, objMap.get(obj)});
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JList<Object[]> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private class ListRenderer extends JLabel implements ListCellRenderer<Object[]> {

        private Object[] data;

        public ListRenderer() {
            super.setFont(new Font("tahoma", Font.BOLD, 16));
            super.setOpaque(true);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setFont(super.getFont());
            g.setColor(super.getForeground());
            int yPos = super.getHeight() / 2 + Tools.centerYString(g.getFontMetrics());
            g.drawString(this.data[0].toString(), 60, yPos);
            String str = "Count: " + this.data[1].toString();
            g.drawString(str, super.getWidth() - 5 - g.getFontMetrics().stringWidth(str), yPos);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends Object[]> list, Object[] obj, int index,
                boolean isSelected, boolean cellHasFocus) {

            WorkSpaceObject wObj = ComponentChooser.selectComponent(obj[0].toString());
            this.setIcon(new ImageIcon(Tools.createImage(wObj, new Dimension(50, 50), 40, 0)));
            this.setPreferredSize(new Dimension(0, 60));

            this.data = obj;

            this.setForeground(isSelected ? Color.WHITE : Color.BLACK);
            super.setBackground(isSelected ? new Color(75, 110, 175)
                    : (index % 2 == 0 ? Color.WHITE : Color.LIGHT_GRAY));

            return this;
        }

    }

}
