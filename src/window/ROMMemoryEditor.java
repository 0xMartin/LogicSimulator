/* 
 * Copyright (C) 2020 Martin Krcma
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package window;

import logicSimulator.data.HexIO;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logicSimulator.Convert;
import logicSimulator.ExceptionLogger;
import logicSimulator.Project;
import logicSimulator.common.Memory;
import logicSimulator.projectFile.HexEditor;
import logicSimulator.ui.SystemResources;

/**
 *
 * @author Martin
 */
public class ROMMemoryEditor extends javax.swing.JFrame {

    private boolean SAVE_CHANGES = true;

    private final Memory memory;

    private final Project project;

    /**
     * Creates new form RAMMemoryEditor
     *
     * @param memory Memory
     * @param project Project
     */
    public ROMMemoryEditor(Memory memory, Project project) {
        initComponents();

        this.project = project;

        //init data from memory
        this.memory = memory;
        initData();

        HexTable centerRenderer = new HexTable();
        this.jTable1.setDefaultRenderer(Object.class, centerRenderer);
        this.jTable1.setShowGrid(false);
        this.jTable1.setForeground(Color.blue);
        this.jTable1.getTableHeader().setReorderingAllowed(false);
        this.jTable1.getTableHeader().setResizingAllowed(false);
        this.jTable1.getTableHeader().getColumnModel().getColumn(0).setMinWidth(50);
    }

    private class HexTable extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (value == null) {
                return null;
            }
            JLabel label = new JLabel(value.toString());
            if (label.getText().length() == 1) {
                label.setText("0" + label.getText());
            }

            if (table.isCellEditable(row, column)) {
                label.setFont(new Font("Consolas", Font.PLAIN, 13));
                if (label.getText().equals("00")) {
                    label.setForeground(Color.GRAY);
                } else {
                    label.setForeground(Color.black);
                }
            } else {
                label.setFont(new Font("Consolas", Font.BOLD, 13));
                label.setForeground(Color.BLUE);
            }

            if (isSelected) {
                label.setForeground(Color.RED);
            }

            label.setHorizontalAlignment(JLabel.CENTER);
            return label;
        }

    }

    private void initData() {
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
        model.getDataVector().clear();
        //header
        model.addColumn("Offset");
        for (int i = 0; i < 16; i++) {
            model.addColumn(Convert.toHexDigit(i));
        }

        //init first data 
        byte[] data = this.memory.getData();
        for (int address = 0; address < data.length; address += 16) {
            String[] line = new String[17];
            line[0] = Convert.intToHex(address);
            model.addRow(line);
        }

        reloadData();
    }

    /**
     * Refresh data view
     */
    private void reloadData() {
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
        this.SAVE_CHANGES = false;

        //data
        byte[] data = this.memory.getData();

        //refresh all values
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int coll = 1; coll < model.getColumnCount(); coll++) {
                model.setValueAt(Convert.byteToHex(data[row * 16 + coll - 1]), row, coll);
            }
        }

        this.SAVE_CHANGES = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTable(){
            public boolean isCellEditable(int row, int column) {
                return column != 0;
            }
        };
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RAM memory data editor");
        setIconImage(SystemResources.ICON_ROM.getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("File");

        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem5.setText("Import");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setText("Clear all");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Replace");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        savaChanges();
    }//GEN-LAST:event_jTable1PropertyChange

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed

    }//GEN-LAST:event_jTable1KeyPressed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        clearAll();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void clearAll() {
        //clear all
        byte[] data = this.memory.getData();
        for (int i = 0; i < data.length; i++) {
            data[i] = 0x0;
        }

        //reload data
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
        //read all cells in memory data and conver them from bin to hex
        for (int row = 0; row < this.jTable1.getRowCount(); row++) {
            for (int col = 1; col < this.jTable1.getColumnCount(); col++) {
                model.setValueAt("0", row, col);
            }
        }
        this.repaint();
    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JTextField oldF = new JTextField("");
        JTextField newF = new JTextField("");
        int stat = JOptionPane.showConfirmDialog(
                this,
                new Object[]{new JLabel("Old: "), oldF, new JLabel("New: "), newF},
                "Replace",
                JOptionPane.OK_CANCEL_OPTION
        );
        if (stat == JOptionPane.OK_OPTION) {
            int old = Convert.bitsToInt(Convert.hexToBitArray(oldF.getText()));
            DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
            for (int row = 0; row < this.jTable1.getRowCount(); row++) {
                for (int col = 0; col < this.jTable1.getColumnCount(); col++) {
                    int t = Convert.bitsToInt(Convert.hexToBitArray(model.getValueAt(row, col).toString()));
                    if (old == t) {
                        model.setValueAt(newF.getText(), row, col);
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savaChanges();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        //import program from hex file
        List<HexEditor> hex = new ArrayList<>();

        this.project.getProjectFiles().stream().forEach((pf) -> {
            if (pf instanceof HexEditor) {
                hex.add((HexEditor) pf);
            }
        });

        String[] names = new String[hex.size()];
        int index = 0;
        for (HexEditor h : hex) {
            names[index++] = h.getName();
        }

        //hex editor
        String input = (String) JOptionPane.showInputDialog(
                this,
                "Choose hex file from project",
                "Import data",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                names,
                names[0]
        );

        //find selected editor and then import data from it
        try {
            DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());
            for (HexEditor editor : hex) {
                if (editor.getName().equals(input)) {
                    //get binary data from hex editor (program for memory)
                    List<Byte> program = editor.getHexData();
                    int offset = editor.getProgramOffset();

                    this.SAVE_CHANGES = false;

                    if (editor.clearAfterUpload()) {
                        clearAll();
                    }

                    //all data put to the table
                    int address = 0;
                    int row = 0, col = 0;
                    while (true) {
                        if (col == 16) {
                            col = 0;
                            row++;
                        }
                        if (row == this.jTable1.getRowCount() || address == program.size()) {
                            break;
                        }
                        if (offset == 0) {
                            model.setValueAt(Convert.byteToHex(program.get(address++)), row, 1 + col);
                        } else {
                            offset--;
                        }
                        col++;
                    }

                    this.SAVE_CHANGES = true;
                    //sava all to memory data array
                    savaChanges();
                    break;
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null,
                    "Can import data",
                    "Error",
                    JOptionPane.ERROR_MESSAGE,
                    null
            );
            ExceptionLogger.getInstance().logException(ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".hex");
            }

            @Override
            public String getDescription() {
                return "Hex fileS";
            }
        });
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            HexIO hFile = new HexIO(chooser.getSelectedFile());
            try {
                hFile.write(this.memory.getData());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Can't save program", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //open hex file
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".hex");
            }

            @Override
            public String getDescription() {
                return "Hex file";
            }
        });
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            HexIO hFile = new HexIO(chooser.getSelectedFile());
            try {
                //read file
                byte[] program = hFile.read();
                //upload program to memory
                byte[] data = this.memory.getData();
                System.arraycopy(program, 0, data, 0, program.length);
                //reloadData
                reloadData();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Can't open program", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void savaChanges() {
        if (this.memory == null || !this.SAVE_CHANGES) {
            return;
        }

        //find changed cells
        byte[] data = this.memory.getData();
        DefaultTableModel model = ((DefaultTableModel) this.jTable1.getModel());

        if (model != null) {

            //for each cell
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 1; col < model.getColumnCount(); col++) {
                    int address = (row * 16 + (col - 1));

                    if (address >= data.length) {
                        continue;
                    }

                    //get value from table
                    String tableCellStr = model.getValueAt(row, col).toString();
                    //if is empty then isert 0
                    if (tableCellStr.length() == 0) {
                        tableCellStr = "0";
                        model.setValueAt("0", row, col);
                    }

                    //if values are diferent then send new value of cell to data in memory
                    byte memCell = data[address];
                    byte tableCell = Convert.hexToByte(tableCellStr);
                    if (memCell != tableCell) {
                        //sava change
                        data[address] = tableCell;
                    }

                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
